// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Category {
  ELECTRONICS
  FURNITURE
  HOME_APPLIANCES
  SPORTING_GOODS
  OUTDOOR
  TOYS
}

enum TransactionType {
  BUY
  RENT
}

enum RentPriceType {
  DAILY
  WEEKLY
  MONTHLY
}

model User {
  id               Int           @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String        @unique
  address          String
  phoneNumber      String        @unique
  password         String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  products         Product[]
  transactionsFrom Transaction[] @relation("FromUser")
  transactionsTo   Transaction[] @relation("ToUser")
}

model Product {
  id            Int           @id @default(autoincrement())
  title         String
  categories    Category[]
  description   String
  purchasePrice Float
  rentPrice     Float
  rentPriceType RentPriceType
  transactions  Transaction[]

  // Foreign key to User
  userId Int
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Transaction {
  id            Int             @id @default(autoincrement())
  type          TransactionType
  rentStartDate DateTime? // optional only for renting
  rentEndDate   DateTime? // optional only for renting

  // Foreign key to User that a is product baught or rented from 
  fromUserId Int
  fromUser   User @relation("FromUser", fields: [fromUserId], references: [id])

  // Foreign key to User that a is product baught or rented to 
  toUserId Int
  toUser   User @relation("ToUser", fields: [toUserId], references: [id])

  // Foreign key to Product
  productId Int
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([fromUserId])
  @@index([toUserId])
  @@index([productId])
}
